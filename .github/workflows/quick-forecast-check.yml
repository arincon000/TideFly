name: Quick Forecast Check

on:
  schedule:
    - cron: "0 12,18,0,6 * * *"   # Every 6 hours: 12:00, 18:00, 00:00, 06:00 UTC (synchronized with worker)
  workflow_dispatch:            # allow manual runs from the UI

jobs:
  quick-check:
    runs-on: ubuntu-latest

    # avoid overlapping runs
    concurrency:
      group: quick-forecast-check-${{ github.ref }}
      cancel-in-progress: true

    timeout-minutes: 10
    permissions:
      contents: read

    # ðŸ”‘ Map GitHub secrets into environment for all steps
    env:
      SUPABASE_URL:            ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_KEY:    ${{ secrets.SUPABASE_SERVICE_KEY }}
      PYTHONUNBUFFERED:        '1'
      PIP_DISABLE_PIP_VERSION_CHECK: '1'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: worker/requirements.txt

      # ðŸ§¹ Strip CR/LF and trim quotes/spaces that can break HTTP headers/URL parsing
      - name: Normalize secrets (strip CR/LF + trim)
        shell: bash
        run: |
          norm() { printf %s "$1" \
            | tr -d '\r\n' \
            | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  -e 's/^"//' -e 's/"$//' -e "s/^'//" -e "s/'$//"; }
          echo "SUPABASE_URL=$(norm "$SUPABASE_URL")" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_KEY=$(norm "$SUPABASE_SERVICE_KEY")" >> $GITHUB_ENV

      # âœ… Safe sanity check (doesn't leak secrets)
      - name: Sanity check required secrets
        shell: bash
        run: |
          python - <<'PY'
          import os, urllib.parse as u
          url = os.getenv("SUPABASE_URL","")
          key = os.getenv("SUPABASE_SERVICE_KEY","")
          p = u.urlparse(url)
          print("URL present:", bool(url))
          print("URL head repr:", repr(url[:16]))
          print("scheme:", p.scheme, "netloc_ok:", bool(p.netloc), "is_supabase:", ("supabase." in p.netloc))
          print("SERVICE_KEY length:", len(key))
          assert p.scheme == "https" and p.netloc, "Bad SUPABASE_URL"
          assert key, "Missing SUPABASE_SERVICE_KEY"
          PY

      - run: python -m pip install --upgrade pip
      - run: pip install -r worker/requirements.txt

      - name: Run quick forecast check (FREE APIs only)
        run: python -u -c "
import os
from supabase import create_client
from datetime import datetime, timezone

# Quick forecast check - FREE APIs only
def quick_forecast_check():
    supabase = create_client(os.getenv('SUPABASE_URL'), os.getenv('SUPABASE_SERVICE_KEY'))
    
    # Get all active alerts
    alerts = supabase.table('alert_rules').select('*').eq('is_active', True).execute()
    
    print(f'[quick-check] Found {len(alerts.data)} active alerts')
    
    for alert in alerts.data:
        spot_id = alert.get('spot_id')
        if not spot_id:
            continue
            
        # Check forecast conditions using cached data (FREE)
        forecast_data = supabase.table('forecast_cache').select('*').eq('spot_id', spot_id).order('cached_at', {'ascending': False}).limit(1).execute()
        
        if forecast_data.data:
            print(f'[quick-check] Alert {alert[\"id\"]}: Forecast data available')
        else:
            print(f'[quick-check] Alert {alert[\"id\"]}: No forecast data')
    
    print('[quick-check] Quick forecast check completed')

if __name__ == '__main__':
    quick_forecast_check()
"
